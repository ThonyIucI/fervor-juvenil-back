# ========================================
# DOCKER COMPOSE - TODO EN CONTENEDORES
# ========================================
# Este archivo levanta tanto la DB como el backend en Docker.
#
# Comandos útiles:
#   docker compose up -d              → Inicia todo (DB + backend)
#   docker compose restart api        → Reinicia SOLO el backend
#   docker compose restart db         → Reinicia SOLO la DB
#   docker compose down               → Detiene y elimina contenedores
#   docker compose logs -f api        → Ver logs del backend
#   docker compose logs -f db         → Ver logs de la DB
#
# Para desarrollo con hot reload local, usa compose.local.yaml
# ========================================

services:
  api:
    build:
     context: .
     target: builder
    container_name: nestjs_container
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "${PORT}:${PORT}"
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    restart: unless-stopped
    environment:
      - NODE_ENV=development
    command: sh -c "npm install && npm run build && npm run start:dev"
  db:
    image: postgres:17
    container_name: postgres_container
    env_file: .env
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5433:${DB_PORT}"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
volumes:
  postgres_data: